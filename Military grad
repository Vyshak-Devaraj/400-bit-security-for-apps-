from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64
import os

class AESCipher:
    def __init__(self, key):
        self.key = key

    def encrypt(self, data):
        cipher = AES.new(self.key, AES.MODE_GCM)
        nonce = cipher.nonce
        ciphertext, tag = cipher.encrypt_and_digest(data.encode('utf-8'))
        return base64.b64encode(nonce + tag + ciphertext).decode('utf-8')

    def decrypt(self, enc_data):
        enc_data = base64.b64decode(enc_data)
        nonce = enc_data[:16]
        tag = enc_data[16:32]
        ciphertext = enc_data[32:]
        cipher = AES.new(self.key, AES.MODE_GCM, nonce=nonce)
        data = cipher.decrypt_and_verify(ciphertext, tag)
        return data.decode('utf-8')

def generate_key():
    return get_random_bytes(32)  # 256-bit key

def main():
    key = generate_key()
    aes_cipher = AESCipher(key)

    data = input("Enter data to encrypt: ")
    encrypted_data = aes_cipher.encrypt(data)
    print(f"Encrypted data: {encrypted_data}")

    decrypted_data = aes_cipher.decrypt(encrypted_data)
    print(f"Decrypted data: {decrypted_data}")

if __name__ == "__main__":
    main()
